"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/remark-flexible-paragraphs";
exports.ids = ["vendor-chunks/remark-flexible-paragraphs"];
exports.modules = {

/***/ "(ssr)/./node_modules/remark-flexible-paragraphs/dist/esm/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/remark-flexible-paragraphs/dist/esm/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   REGEX: () => (/* binding */ REGEX),\n/* harmony export */   REGEX_GLOBAL: () => (/* binding */ REGEX_GLOBAL),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   plugin: () => (/* binding */ plugin)\n/* harmony export */ });\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-visit */ \"(ssr)/./node_modules/unist-util-visit/lib/index.js\");\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! unist-util-visit */ \"(ssr)/./node_modules/unist-util-visit-parents/lib/index.js\");\n/* harmony import */ var unist_builder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! unist-builder */ \"(ssr)/./node_modules/unist-builder/lib/index.js\");\n\n\nconst dictionary = {\n    a: \"alert\",\n    b: \"blue\",\n    c: \"caution\",\n    d: \"danger\",\n    e: \"error\",\n    f: \"framed\",\n    g: \"green\",\n    h: \"horizontal\",\n    i: \"info\",\n    j: \"jumbo\",\n    k: \"kindle\",\n    l: \"lokum\",\n    m: \"menu\",\n    n: \"note\",\n    o: \"ordinary\",\n    p: \"pack\",\n    q: \"quantity\",\n    r: \"red\",\n    s: \"success\",\n    t: \"tip\",\n    u: \"unified\",\n    v: \"verticle\",\n    w: \"warning\",\n    x: \"xray\",\n    y: \"yellow\",\n    z: \"zigzag\",\n    \"0\": \"type-0\",\n    \"1\": \"type-1\",\n    \"2\": \"type-2\",\n    \"3\": \"type-3\",\n    \"4\": \"type-4\",\n    \"5\": \"type-5\",\n    \"6\": \"type-6\",\n    \"7\": \"type-7\",\n    \"8\": \"type-8\",\n    \"9\": \"type-9\",\n};\nconst DEFAULT_SETTINGS = {\n    dictionary,\n    paragraphClassName: \"flexible-paragraph\",\n    paragraphClassificationPrefix: \"flexiparaph\",\n    wrapperTagName: \"div\",\n    wrapperClassName: \"flexible-paragraph-wrapper\",\n};\nconst REGEX = /([~=])(:)?([a-z0-9]*\\|?[a-z0-9]*)?(:)?>\\s*/;\nconst REGEX_GLOBAL = /([~=])(:)?([a-z0-9]*\\|?[a-z0-9]*)?(:)?>\\s*/g;\n/**\n *\n * This plugin turns a paragraph into a flexible paragraph or splits it as a flexible paragraph,\n * with optional wrapper, customizable classifications and customizable alignment\n *\n * for example:\n *\n * ~> I am a flexible paragraph\n * => I am a flexible paragraph wrapped in a div\n *\n */\nconst plugin = (options) => {\n    const settings = Object.assign({}, DEFAULT_SETTINGS, options);\n    if (options?.dictionary && Object.keys(options.dictionary).length) {\n        settings.dictionary = Object.assign({}, dictionary, options.dictionary);\n    }\n    /**\n     *\n     * constracts the paragraph node\n     *\n     */\n    const constructParagraph = (phrasingContents, classifications, alignment) => {\n        const classnames = [];\n        classifications.forEach((classification) => {\n            classnames.push(settings.paragraphClassificationPrefix === \"\"\n                ? `${classification}`\n                : `${settings.paragraphClassificationPrefix}-${classification}`);\n        });\n        if (alignment) {\n            classnames.push(settings.paragraphClassificationPrefix === \"\"\n                ? `align-${alignment}`\n                : `${settings.paragraphClassificationPrefix}-align-${alignment}`);\n        }\n        const paragraphClassName = typeof settings.paragraphClassName === \"function\"\n            ? settings.paragraphClassName(alignment, classifications)\n            : [settings.paragraphClassName, ...classnames];\n        let properties;\n        if (settings.paragraphProperties) {\n            properties = settings.paragraphProperties(alignment, classifications);\n            Object.entries(properties).forEach(([k, v]) => {\n                if ((typeof v === \"string\" && v === \"\") ||\n                    (Array.isArray(v) && v.length === 0)) {\n                    if (properties) {\n                        properties[k] = undefined;\n                    }\n                }\n                if (k === \"className\")\n                    delete properties?.[\"className\"];\n            });\n        }\n        return {\n            type: \"paragraph\",\n            children: phrasingContents,\n            data: {\n                hName: \"p\",\n                hProperties: {\n                    className: paragraphClassName,\n                    ...(properties && { ...properties }),\n                    style: alignment ? `text-align:${alignment}` : undefined,\n                },\n            },\n        };\n    };\n    /**\n     *\n     * constracts the wrapper node\n     *\n     */\n    const constructWrapper = (paragraph, classifications, alignment) => {\n        const wrapperTagName = typeof settings.wrapperTagName === \"string\"\n            ? settings.wrapperTagName\n            : settings.wrapperTagName(alignment, classifications);\n        const wrapperClassName = typeof settings.wrapperClassName === \"function\"\n            ? settings.wrapperClassName(alignment, classifications)\n            : [settings.wrapperClassName];\n        let properties;\n        if (settings.wrapperProperties) {\n            properties = settings.wrapperProperties(alignment, classifications);\n            Object.entries(properties).forEach(([k, v]) => {\n                if ((typeof v === \"string\" && v === \"\") ||\n                    (Array.isArray(v) && v.length === 0)) {\n                    if (properties) {\n                        properties[k] = undefined;\n                    }\n                }\n                if (k === \"className\")\n                    delete properties?.[\"className\"];\n            });\n        }\n        return {\n            type: \"wrapper\",\n            children: [paragraph],\n            data: {\n                hName: wrapperTagName,\n                hProperties: {\n                    className: wrapperClassName,\n                    ...(properties && { ...properties }),\n                },\n            },\n        };\n    };\n    /**\n     *\n     * checks whether the paragraph node contains a text node which has a regex match.\n     *\n     */\n    function checkIsTarget(node) {\n        let isTarget = false;\n        (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_0__.visit)(node, \"text\", (textNode) => {\n            if (!REGEX.test(textNode.value))\n                return;\n            isTarget = true;\n            return unist_util_visit__WEBPACK_IMPORTED_MODULE_1__.EXIT;\n        });\n        return isTarget;\n    }\n    /**\n     *\n     * returns the array with added value, handles if the array is undefined\n     *\n     */\n    function insert(array, phrasingContent) {\n        if (typeof array === \"undefined\") {\n            array = [phrasingContent];\n        }\n        else {\n            array.push(phrasingContent);\n        }\n        return array;\n    }\n    /**\n     *\n     * returns the extracted info about flexible paragraph from the match\n     *\n     */\n    function getFlexibleNode({ marker, left, classes, right, }) {\n        let _alignment;\n        if (!left && !right) {\n            _alignment = undefined;\n        }\n        else if (left && right) {\n            _alignment = \"justify\";\n        }\n        else if (left) {\n            _alignment = \"left\";\n        }\n        else if (right) {\n            _alignment = \"right\";\n        }\n        if (classes?.includes(\"|\")) {\n            _alignment = \"center\";\n        }\n        if (classes === \"|\") {\n            if (left && right) {\n                _alignment = \"justify\";\n            }\n            else if (left) {\n                _alignment = \"left\";\n            }\n            else if (right) {\n                _alignment = \"right\";\n            }\n        }\n        const markers = {\n            \"=\": \"wrapper\",\n            \"~\": \"paragraph\",\n        };\n        const type = markers[marker];\n        const alignment = _alignment;\n        const classifications = classes\n            ? Array.from(classes).reduce((list, char) => {\n                if (char !== \"|\") {\n                    const name = settings.dictionary[char];\n                    if (name)\n                        list.push(name);\n                }\n                return list;\n            }, [])\n            : [];\n        return { type, alignment, classifications };\n    }\n    /**\n     *\n     * type guard\n     *\n     */\n    const isTextNode = (node) => {\n        return \"value\" in node && node.type === \"text\";\n    };\n    /**\n     *\n     * visits the Paragraph nodes\n     *\n     */\n    const visitor = function (node, index, parent) {\n        /* v8 ignore next */\n        if (!parent || typeof index === \"undefined\")\n            return;\n        const isTarget = checkIsTarget(node);\n        if (!isTarget)\n            return;\n        const nodes = [];\n        const phrasesMatrix = [[]];\n        const flexibleNodes = [];\n        let matrixIndex = 0;\n        // traverse the paragraph looking for the markers\n        for (const phrasingContent of node.children) {\n            if (!isTextNode(phrasingContent)) {\n                phrasesMatrix[matrixIndex] = insert(phrasesMatrix[matrixIndex], phrasingContent);\n            }\n            else {\n                const value = phrasingContent.value;\n                // console.log(\"value: \", JSON.stringify(value));\n                // console.log(Array.from(value.matchAll(REGEX_GLOBAL), (m) => m[0]));\n                const matches = Array.from(value.matchAll(REGEX_GLOBAL));\n                if (!matches.length) {\n                    phrasesMatrix[matrixIndex] = insert(phrasesMatrix[matrixIndex], phrasingContent);\n                }\n                else {\n                    for (let idx = 0; idx < matches.length; idx++) {\n                        const match = matches[idx];\n                        const [matched, marker, left, classes, right] = match;\n                        const mIndex = match.index;\n                        const mLength = matched.length;\n                        // if it is the first match but the marker index is not first\n                        if (idx === 0 && mIndex !== 0) {\n                            const textValue = value.substring(0, mIndex);\n                            if (textValue) {\n                                const text = (0,unist_builder__WEBPACK_IMPORTED_MODULE_2__.u)(\"text\", textValue);\n                                phrasesMatrix[matrixIndex] = insert(phrasesMatrix[matrixIndex], text);\n                            }\n                        }\n                        // do not increase matrixIndex if the marker is in the first phrase in the beginning\n                        if (idx !== 0 || mIndex !== 0)\n                            matrixIndex++;\n                        const textValue = idx === matches.length - 1\n                            ? // if it is the last match\n                                value.slice(mIndex + mLength)\n                            : // if it is NOT the last match\n                                value.substring(mIndex + mLength, matches[idx + 1].index);\n                        if (textValue) {\n                            const text = (0,unist_builder__WEBPACK_IMPORTED_MODULE_2__.u)(\"text\", textValue);\n                            phrasesMatrix[matrixIndex] = insert(phrasesMatrix[matrixIndex], text);\n                        }\n                        flexibleNodes[matrixIndex] = getFlexibleNode({\n                            marker, // \"=\" or \"~\"\n                            left,\n                            classes,\n                            right,\n                        });\n                    }\n                }\n            }\n        }\n        // clean the newline and spaces at the last phrases (if Text) of each flexible paragraph\n        phrasesMatrix.forEach((phrasingContents) => {\n            const lastPhrase = phrasingContents[phrasingContents.length - 1];\n            if (lastPhrase.type === \"text\") {\n                lastPhrase.value = lastPhrase.value.replace(/[\\s\\r\\n]+$/, \"\");\n            }\n        });\n        // construct the flexible paragraphs whether in a wrapper or not\n        phrasesMatrix.forEach((phrasingContents, i) => {\n            const paragraph = flexibleNodes[i]\n                ? constructParagraph(phrasingContents, flexibleNodes[i].classifications, flexibleNodes[i].alignment)\n                : (0,unist_builder__WEBPACK_IMPORTED_MODULE_2__.u)(\"paragraph\", phrasingContents);\n            if (flexibleNodes[i]?.type === \"wrapper\") {\n                const wrapper = constructWrapper(paragraph, flexibleNodes[i].classifications, flexibleNodes[i].alignment);\n                nodes.push(wrapper);\n            }\n            else {\n                nodes.push(paragraph);\n            }\n        });\n        if (nodes.length)\n            parent.children.splice(index, 1, ...nodes);\n    };\n    const transformer = (tree) => {\n        (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_0__.visit)(tree, \"paragraph\", visitor);\n    };\n    return transformer;\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (plugin);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/remark-flexible-paragraphs/dist/esm/index.js\n");

/***/ })

};
;