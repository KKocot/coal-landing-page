"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/unist-util-find-between-all";
exports.ids = ["vendor-chunks/unist-util-find-between-all"];
exports.modules = {

/***/ "(ssr)/./node_modules/unist-util-find-between-all/dist/lib/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/unist-util-find-between-all/dist/lib/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   findAllBetween: () => (/* binding */ findAllBetween)\n/* harmony export */ });\n/* harmony import */ var unist_util_is__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-is */ \"(ssr)/./node_modules/unist-util-is/lib/index.js\");\n/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesnâ€™t work when publishing on npm.\n */\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n/**\n * @typedef {(\n *   Kind extends {children: Array<infer Child>}\n *   ? Child\n *   : never\n * )} Child\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Kind\n *   All node types.\n */\n\n/**\n * Find the nodes in `parent` between two `node`s or two indexes, that\n * pass `test`. Nodes and indexes at both sides are excluded, but there is an\n * option for including both sides\n *\n * @param parent\n *   Parent node.\n * @param indexStart\n *   Child node or index in the start of between\n * @param indexEnd\n *   Child node or index in the end of between\n * @param [test=undefined]\n *   Test for child to look for (optional).\n * @param [options=undefined]\n *   The behaviour for including or excluding both sides (optional).\n * @returns\n *   Children (matching `test`, if given).\n */\nconst findAllBetween = \n// Note: overloads like this are needed to support optional generics.\n/**\n * @type {(\n *   (<Kind extends UnistParent, Check extends Test>(parent: Kind, indexStart: Child<Kind> | number, indexEnd: Child<Kind> | number, test: Check, options?: Behaviour) => Array<Matches<Child<Kind>, Check>>) &\n *   (<Kind extends UnistParent>(parent: Kind, indexStart: Child<Kind> | number, indexEnd: Child<Kind> | number, test?: null | undefined, options?: Behaviour) => Array<Child<Kind>>)\n * )}\n */\n(\n/**\n * @typedef {({behaviour : \"include\" | \"exclude\"})} Behaviour\n * whether nodes and indexes ath both sides included or exculuded.\n * default behaviour is excluded one.\n */\n/**\n * @param {UnistParent} parent\n * @param {UnistNode | number} indexStart\n * @param {UnistNode | number} indexEnd\n * @param {Test} [test]\n * @param {undefined | Behaviour} [options]\n * @returns {Array<UnistNode>}\n */\n/* eslint max-params: [\"error\", 5] */\nfunction (parent, indexStart, indexEnd, test, options) {\n    const is = (0,unist_util_is__WEBPACK_IMPORTED_MODULE_0__.convert)(test);\n    /** @type {Array<UnistNode>} */\n    const results = [];\n    if (!parent || !parent.type || !parent.children) {\n        throw new Error('Expected parent node');\n    }\n    if (typeof indexStart === 'number') {\n        if (indexStart < 0 || indexStart === Number.POSITIVE_INFINITY) {\n            throw new Error('Expected positive finite number as index for start');\n        }\n    }\n    else {\n        indexStart = parent.children.indexOf(indexStart);\n        if (indexStart < 0) {\n            throw new Error('Expected child node or index for start');\n        }\n    }\n    if (typeof indexEnd === 'number') {\n        if (indexEnd < 0 || indexEnd === Number.POSITIVE_INFINITY) {\n            throw new Error('Expected positive finite number as index for end');\n        }\n    }\n    else {\n        indexEnd = parent.children.indexOf(indexEnd);\n        if (indexEnd < 0) {\n            throw new Error('Expected child node or index for end');\n        }\n    }\n    if (options?.behaviour === 'include') {\n        while (indexStart <= indexEnd) {\n            if (is(parent.children[indexStart], indexStart, parent)) {\n                results.push(parent.children[indexStart]);\n            }\n            indexStart++;\n        }\n    }\n    else {\n        while (++indexStart < indexEnd) {\n            if (is(parent.children[indexStart], indexStart, parent)) {\n                results.push(parent.children[indexStart]);\n            }\n        }\n    }\n    return results;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/unist-util-find-between-all/dist/lib/index.js\n");

/***/ })

};
;