"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mhchemparser";
exports.ids = ["vendor-chunks/mhchemparser"];
exports.modules = {

/***/ "(ssr)/./node_modules/mhchemparser/dist/mhchemParser.js":
/*!********************************************************!*\
  !*** ./node_modules/mhchemparser/dist/mhchemParser.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*!\n *************************************************************************\n *\n *  mhchemParser.ts\n *  4.2.1\n *\n *  Parser for the \\ce command and \\pu command for MathJax and Co.\n *\n *  mhchem's \\ce is a tool for writing beautiful chemical equations easily.\n *  mhchem's \\pu is a tool for writing physical units easily.\n *\n *  ----------------------------------------------------------------------\n *\n *  Copyright (c) 2015-2023 Martin Hensel\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  ----------------------------------------------------------------------\n *\n *  https://github.com/mhchem/mhchemParser\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.mhchemParser = void 0;\nvar mhchemParser = (function () {\n    function mhchemParser() {\n    }\n    mhchemParser.toTex = function (input, type) {\n        return _mhchemTexify.go(_mhchemParser.go(input, type), type !== \"tex\");\n    };\n    return mhchemParser;\n}());\nexports.mhchemParser = mhchemParser;\nfunction _mhchemCreateTransitions(o) {\n    var pattern, state;\n    var transitions = {};\n    for (pattern in o) {\n        for (state in o[pattern]) {\n            var stateArray = state.split(\"|\");\n            o[pattern][state].stateArray = stateArray;\n            for (var i = 0; i < stateArray.length; i++) {\n                transitions[stateArray[i]] = [];\n            }\n        }\n    }\n    for (pattern in o) {\n        for (state in o[pattern]) {\n            var stateArray = o[pattern][state].stateArray || [];\n            for (var i = 0; i < stateArray.length; i++) {\n                var p = o[pattern][state];\n                p.action_ = [].concat(p.action_);\n                for (var k = 0; k < p.action_.length; k++) {\n                    if (typeof p.action_[k] === \"string\") {\n                        p.action_[k] = { type_: p.action_[k] };\n                    }\n                }\n                var patternArray = pattern.split(\"|\");\n                for (var j = 0; j < patternArray.length; j++) {\n                    if (stateArray[i] === '*') {\n                        var t = void 0;\n                        for (t in transitions) {\n                            transitions[t].push({ pattern: patternArray[j], task: p });\n                        }\n                    }\n                    else {\n                        transitions[stateArray[i]].push({ pattern: patternArray[j], task: p });\n                    }\n                }\n            }\n        }\n    }\n    return transitions;\n}\n;\nvar _mhchemParser = {\n    go: function (input, stateMachine) {\n        if (!input) {\n            return [];\n        }\n        if (stateMachine === undefined) {\n            stateMachine = 'ce';\n        }\n        var state = '0';\n        var buffer = {};\n        buffer['parenthesisLevel'] = 0;\n        input = input.replace(/\\n/g, \" \");\n        input = input.replace(/[\\u2212\\u2013\\u2014\\u2010]/g, \"-\");\n        input = input.replace(/[\\u2026]/g, \"...\");\n        var lastInput;\n        var watchdog = 10;\n        var output = [];\n        while (true) {\n            if (lastInput !== input) {\n                watchdog = 10;\n                lastInput = input;\n            }\n            else {\n                watchdog--;\n            }\n            var machine = _mhchemParser.stateMachines[stateMachine];\n            var t = machine.transitions[state] || machine.transitions['*'];\n            iterateTransitions: for (var i = 0; i < t.length; i++) {\n                var matches = _mhchemParser.patterns.match_(t[i].pattern, input);\n                if (matches) {\n                    var task = t[i].task;\n                    for (var iA = 0; iA < task.action_.length; iA++) {\n                        var o = void 0;\n                        if (machine.actions[task.action_[iA].type_]) {\n                            o = machine.actions[task.action_[iA].type_](buffer, matches.match_, task.action_[iA].option);\n                        }\n                        else if (_mhchemParser.actions[task.action_[iA].type_]) {\n                            o = _mhchemParser.actions[task.action_[iA].type_](buffer, matches.match_, task.action_[iA].option);\n                        }\n                        else {\n                            throw [\"MhchemBugA\", \"mhchem bug A. Please report. (\" + task.action_[iA].type_ + \")\"];\n                        }\n                        _mhchemParser.concatArray(output, o);\n                    }\n                    state = task.nextState || state;\n                    if (input.length > 0) {\n                        if (!task.revisit) {\n                            input = matches.remainder;\n                        }\n                        if (!task.toContinue) {\n                            break iterateTransitions;\n                        }\n                    }\n                    else {\n                        return output;\n                    }\n                }\n            }\n            if (watchdog <= 0) {\n                throw [\"MhchemBugU\", \"mhchem bug U. Please report.\"];\n            }\n        }\n    },\n    concatArray: function (a, b) {\n        if (b) {\n            if (Array.isArray(b)) {\n                for (var iB = 0; iB < b.length; iB++) {\n                    a.push(b[iB]);\n                }\n            }\n            else {\n                a.push(b);\n            }\n        }\n    },\n    patterns: {\n        patterns: {\n            'empty': /^$/,\n            'else': /^./,\n            'else2': /^./,\n            'space': /^\\s/,\n            'space A': /^\\s(?=[A-Z\\\\$])/,\n            'space$': /^\\s$/,\n            'a-z': /^[a-z]/,\n            'x': /^x/,\n            'x$': /^x$/,\n            'i$': /^i$/,\n            'letters': /^(?:[a-zA-Z\\u03B1-\\u03C9\\u0391-\\u03A9?@]|(?:\\\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(?:\\s+|\\{\\}|(?![a-zA-Z]))))+/,\n            '\\\\greek': /^\\\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(?:\\s+|\\{\\}|(?![a-zA-Z]))/,\n            'one lowercase latin letter $': /^(?:([a-z])(?:$|[^a-zA-Z]))$/,\n            '$one lowercase latin letter$ $': /^\\$(?:([a-z])(?:$|[^a-zA-Z]))\\$$/,\n            'one lowercase greek letter $': /^(?:\\$?[\\u03B1-\\u03C9]\\$?|\\$?\\\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega)\\s*\\$?)(?:\\s+|\\{\\}|(?![a-zA-Z]))$/,\n            'digits': /^[0-9]+/,\n            '-9.,9': /^[+\\-]?(?:[0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\\.[0-9]+))/,\n            '-9.,9 no missing 0': /^[+\\-]?[0-9]+(?:[.,][0-9]+)?/,\n            '(-)(9.,9)(e)(99)': function (input) {\n                var match = input.match(/^(\\+\\-|\\+\\/\\-|\\+|\\-|\\\\pm\\s?)?([0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\\.[0-9]+))?(\\((?:[0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\\.[0-9]+))\\))?(?:(?:([eE])|\\s*(\\*|x|\\\\times|\\u00D7)\\s*10\\^)([+\\-]?[0-9]+|\\{[+\\-]?[0-9]+\\}))?/);\n                if (match && match[0]) {\n                    return { match_: match.slice(1), remainder: input.substr(match[0].length) };\n                }\n                return null;\n            },\n            '(-)(9)^(-9)': /^(\\+\\-|\\+\\/\\-|\\+|\\-|\\\\pm\\s?)?([0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\\.[0-9]+)?)\\^([+\\-]?[0-9]+|\\{[+\\-]?[0-9]+\\})/,\n            'state of aggregation $': function (input) {\n                var a = _mhchemParser.patterns.findObserveGroups(input, \"\", /^\\([a-z]{1,3}(?=[\\),])/, \")\", \"\");\n                if (a && a.remainder.match(/^($|[\\s,;\\)\\]\\}])/)) {\n                    return a;\n                }\n                var match = input.match(/^(?:\\((?:\\\\ca\\s?)?\\$[amothc]\\$\\))/);\n                if (match) {\n                    return { match_: match[0], remainder: input.substr(match[0].length) };\n                }\n                return null;\n            },\n            '_{(state of aggregation)}$': /^_\\{(\\([a-z]{1,3}\\))\\}/,\n            '{[(': /^(?:\\\\\\{|\\[|\\()/,\n            ')]}': /^(?:\\)|\\]|\\\\\\})/,\n            ', ': /^[,;]\\s*/,\n            ',': /^[,;]/,\n            '.': /^[.]/,\n            '. __* ': /^([.\\u22C5\\u00B7\\u2022]|[*])\\s*/,\n            '...': /^\\.\\.\\.(?=$|[^.])/,\n            '^{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"^{\", \"\", \"\", \"}\"); },\n            '^($...$)': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"^\", \"$\", \"$\", \"\"); },\n            '^a': /^\\^([0-9]+|[^\\\\_])/,\n            '^\\\\x{}{}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"^\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\", \"\", \"{\", \"}\", \"\", true); },\n            '^\\\\x{}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"^\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\"); },\n            '^\\\\x': /^\\^(\\\\[a-zA-Z]+)\\s*/,\n            '^(-1)': /^\\^(-?\\d+)/,\n            '\\'': /^'/,\n            '_{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"_{\", \"\", \"\", \"}\"); },\n            '_($...$)': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"_\", \"$\", \"$\", \"\"); },\n            '_9': /^_([+\\-]?[0-9]+|[^\\\\])/,\n            '_\\\\x{}{}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"_\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\", \"\", \"{\", \"}\", \"\", true); },\n            '_\\\\x{}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"_\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\"); },\n            '_\\\\x': /^_(\\\\[a-zA-Z]+)\\s*/,\n            '^_': /^(?:\\^(?=_)|\\_(?=\\^)|[\\^_]$)/,\n            '{}^': /^\\{\\}(?=\\^)/,\n            '{}': /^\\{\\}/,\n            '{...}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"\", \"{\", \"}\", \"\"); },\n            '{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"{\", \"\", \"\", \"}\"); },\n            '$...$': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"\", \"$\", \"$\", \"\"); },\n            '${(...)}$__$(...)$': function (input) {\n                return _mhchemParser.patterns.findObserveGroups(input, \"${\", \"\", \"\", \"}$\") || _mhchemParser.patterns.findObserveGroups(input, \"$\", \"\", \"\", \"$\");\n            },\n            '=<>': /^[=<>]/,\n            '#': /^[#\\u2261]/,\n            '+': /^\\+/,\n            '-$': /^-(?=[\\s_},;\\]/]|$|\\([a-z]+\\))/,\n            '-9': /^-(?=[0-9])/,\n            '- orbital overlap': /^-(?=(?:[spd]|sp)(?:$|[\\s,;\\)\\]\\}]))/,\n            '-': /^-/,\n            'pm-operator': /^(?:\\\\pm|\\$\\\\pm\\$|\\+-|\\+\\/-)/,\n            'operator': /^(?:\\+|(?:[\\-=<>]|<<|>>|\\\\approx|\\$\\\\approx\\$)(?=\\s|$|-?[0-9]))/,\n            'arrowUpDown': /^(?:v|\\(v\\)|\\^|\\(\\^\\))(?=$|[\\s,;\\)\\]\\}])/,\n            '\\\\bond{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"\\\\bond{\", \"\", \"\", \"}\"); },\n            '->': /^(?:<->|<-->|->|<-|<=>>|<<=>|<=>|[\\u2192\\u27F6\\u21CC])/,\n            'CMT': /^[CMT](?=\\[)/,\n            '[(...)]': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"[\", \"\", \"\", \"]\"); },\n            '1st-level escape': /^(&|\\\\\\\\|\\\\hline)\\s*/,\n            '\\\\,': /^(?:\\\\[,\\ ;:])/,\n            '\\\\x{}{}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\", \"\", \"{\", \"}\", \"\", true); },\n            '\\\\x{}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\"); },\n            '\\\\ca': /^\\\\ca(?:\\s+|(?![a-zA-Z]))/,\n            '\\\\x': /^(?:\\\\[a-zA-Z]+\\s*|\\\\[_&{}%])/,\n            'orbital': /^(?:[0-9]{1,2}[spdfgh]|[0-9]{0,2}sp)(?=$|[^a-zA-Z])/,\n            'others': /^[\\/~|]/,\n            '\\\\frac{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"\\\\frac{\", \"\", \"\", \"}\", \"{\", \"\", \"\", \"}\"); },\n            '\\\\overset{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"\\\\overset{\", \"\", \"\", \"}\", \"{\", \"\", \"\", \"}\"); },\n            '\\\\underset{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"\\\\underset{\", \"\", \"\", \"}\", \"{\", \"\", \"\", \"}\"); },\n            '\\\\underbrace{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"\\\\underbrace{\", \"\", \"\", \"}_\", \"{\", \"\", \"\", \"}\"); },\n            '\\\\color{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"\\\\color{\", \"\", \"\", \"}\"); },\n            '\\\\color{(...)}{(...)}': function (input) {\n                return _mhchemParser.patterns.findObserveGroups(input, \"\\\\color{\", \"\", \"\", \"}\", \"{\", \"\", \"\", \"}\") ||\n                    _mhchemParser.patterns.findObserveGroups(input, \"\\\\color\", \"\\\\\", \"\", /^(?=\\{)/, \"{\", \"\", \"\", \"}\");\n            },\n            '\\\\ce{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"\\\\ce{\", \"\", \"\", \"}\"); },\n            '\\\\pu{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, \"\\\\pu{\", \"\", \"\", \"}\"); },\n            'oxidation$': /^(?:[+-][IVX]+|(?:\\\\pm|\\$\\\\pm\\$|\\+-|\\+\\/-)\\s*0)$/,\n            'd-oxidation$': /^(?:[+-]?[IVX]+|(?:\\\\pm|\\$\\\\pm\\$|\\+-|\\+\\/-)\\s*0)$/,\n            '1/2$': /^[+\\-]?(?:[0-9]+|\\$[a-z]\\$|[a-z])\\/[0-9]+(?:\\$[a-z]\\$|[a-z])?$/,\n            'amount': function (input) {\n                var match;\n                match = input.match(/^(?:(?:(?:\\([+\\-]?[0-9]+\\/[0-9]+\\)|[+\\-]?(?:[0-9]+|\\$[a-z]\\$|[a-z])\\/[0-9]+|[+\\-]?[0-9]+[.,][0-9]+|[+\\-]?\\.[0-9]+|[+\\-]?[0-9]+)(?:[a-z](?=\\s*[A-Z]))?)|[+\\-]?[a-z](?=\\s*[A-Z])|\\+(?!\\s))/);\n                if (match) {\n                    return { match_: match[0], remainder: input.substr(match[0].length) };\n                }\n                var a = _mhchemParser.patterns.findObserveGroups(input, \"\", \"$\", \"$\", \"\");\n                if (a) {\n                    match = a.match_.match(/^\\$(?:\\(?[+\\-]?(?:[0-9]*[a-z]?[+\\-])?[0-9]*[a-z](?:[+\\-][0-9]*[a-z]?)?\\)?|\\+|-)\\$$/);\n                    if (match) {\n                        return { match_: match[0], remainder: input.substr(match[0].length) };\n                    }\n                }\n                return null;\n            },\n            'amount2': function (input) { return this['amount'](input); },\n            '(KV letters),': /^(?:[A-Z][a-z]{0,2}|i)(?=,)/,\n            'formula$': function (input) {\n                if (input.match(/^\\([a-z]+\\)$/)) {\n                    return null;\n                }\n                var match = input.match(/^(?:[a-z]|(?:[0-9\\ \\+\\-\\,\\.\\(\\)]+[a-z])+[0-9\\ \\+\\-\\,\\.\\(\\)]*|(?:[a-z][0-9\\ \\+\\-\\,\\.\\(\\)]+)+[a-z]?)$/);\n                if (match) {\n                    return { match_: match[0], remainder: input.substr(match[0].length) };\n                }\n                return null;\n            },\n            'uprightEntities': /^(?:pH|pOH|pC|pK|iPr|iBu)(?=$|[^a-zA-Z])/,\n            '/': /^\\s*(\\/)\\s*/,\n            '//': /^\\s*(\\/\\/)\\s*/,\n            '*': /^\\s*[*.]\\s*/\n        },\n        findObserveGroups: function (input, begExcl, begIncl, endIncl, endExcl, beg2Excl, beg2Incl, end2Incl, end2Excl, combine) {\n            var _match = function (input, pattern) {\n                if (typeof pattern === \"string\") {\n                    if (input.indexOf(pattern) !== 0) {\n                        return null;\n                    }\n                    return pattern;\n                }\n                else {\n                    var match_1 = input.match(pattern);\n                    if (!match_1) {\n                        return null;\n                    }\n                    return match_1[0];\n                }\n            };\n            var _findObserveGroups = function (input, i, endChars) {\n                var braces = 0;\n                while (i < input.length) {\n                    var a = input.charAt(i);\n                    var match_2 = _match(input.substr(i), endChars);\n                    if (match_2 !== null && braces === 0) {\n                        return { endMatchBegin: i, endMatchEnd: i + match_2.length };\n                    }\n                    else if (a === \"{\") {\n                        braces++;\n                    }\n                    else if (a === \"}\") {\n                        if (braces === 0) {\n                            throw [\"ExtraCloseMissingOpen\", \"Extra close brace or missing open brace\"];\n                        }\n                        else {\n                            braces--;\n                        }\n                    }\n                    i++;\n                }\n                if (braces > 0) {\n                    return null;\n                }\n                return null;\n            };\n            var match = _match(input, begExcl);\n            if (match === null) {\n                return null;\n            }\n            input = input.substr(match.length);\n            match = _match(input, begIncl);\n            if (match === null) {\n                return null;\n            }\n            var e = _findObserveGroups(input, match.length, endIncl || endExcl);\n            if (e === null) {\n                return null;\n            }\n            var match1 = input.substring(0, (endIncl ? e.endMatchEnd : e.endMatchBegin));\n            if (!(beg2Excl || beg2Incl)) {\n                return {\n                    match_: match1,\n                    remainder: input.substr(e.endMatchEnd)\n                };\n            }\n            else {\n                var group2 = this.findObserveGroups(input.substr(e.endMatchEnd), beg2Excl, beg2Incl, end2Incl, end2Excl);\n                if (group2 === null) {\n                    return null;\n                }\n                var matchRet = [match1, group2.match_];\n                return {\n                    match_: (combine ? matchRet.join(\"\") : matchRet),\n                    remainder: group2.remainder\n                };\n            }\n        },\n        match_: function (m, input) {\n            var pattern = _mhchemParser.patterns.patterns[m];\n            if (pattern === undefined) {\n                throw [\"MhchemBugP\", \"mhchem bug P. Please report. (\" + m + \")\"];\n            }\n            else if (typeof pattern === \"function\") {\n                return _mhchemParser.patterns.patterns[m](input);\n            }\n            else {\n                var match = input.match(pattern);\n                if (match) {\n                    if (match.length > 2) {\n                        return { match_: match.slice(1), remainder: input.substr(match[0].length) };\n                    }\n                    else {\n                        return { match_: match[1] || match[0], remainder: input.substr(match[0].length) };\n                    }\n                }\n                return null;\n            }\n        }\n    },\n    actions: {\n        'a=': function (buffer, m) { buffer.a = (buffer.a || \"\") + m; return undefined; },\n        'b=': function (buffer, m) { buffer.b = (buffer.b || \"\") + m; return undefined; },\n        'p=': function (buffer, m) { buffer.p = (buffer.p || \"\") + m; return undefined; },\n        'o=': function (buffer, m) { buffer.o = (buffer.o || \"\") + m; return undefined; },\n        'o=+p1': function (buffer, _m, a) { buffer.o = (buffer.o || \"\") + a; return undefined; },\n        'q=': function (buffer, m) { buffer.q = (buffer.q || \"\") + m; return undefined; },\n        'd=': function (buffer, m) { buffer.d = (buffer.d || \"\") + m; return undefined; },\n        'rm=': function (buffer, m) { buffer.rm = (buffer.rm || \"\") + m; return undefined; },\n        'text=': function (buffer, m) { buffer.text_ = (buffer.text_ || \"\") + m; return undefined; },\n        'insert': function (_buffer, _m, a) { return { type_: a }; },\n        'insert+p1': function (_buffer, m, a) { return { type_: a, p1: m }; },\n        'insert+p1+p2': function (_buffer, m, a) { return { type_: a, p1: m[0], p2: m[1] }; },\n        'copy': function (_buffer, m) { return m; },\n        'write': function (_buffer, _m, a) { return a; },\n        'rm': function (_buffer, m) { return { type_: 'rm', p1: m }; },\n        'text': function (_buffer, m) { return _mhchemParser.go(m, 'text'); },\n        'tex-math': function (_buffer, m) { return _mhchemParser.go(m, 'tex-math'); },\n        'tex-math tight': function (_buffer, m) { return _mhchemParser.go(m, 'tex-math tight'); },\n        'bond': function (_buffer, m, k) { return { type_: 'bond', kind_: k || m }; },\n        'color0-output': function (_buffer, m) { return { type_: 'color0', color: m }; },\n        'ce': function (_buffer, m) { return _mhchemParser.go(m, 'ce'); },\n        'pu': function (_buffer, m) { return _mhchemParser.go(m, 'pu'); },\n        '1/2': function (_buffer, m) {\n            var ret = [];\n            if (m.match(/^[+\\-]/)) {\n                ret.push(m.substr(0, 1));\n                m = m.substr(1);\n            }\n            var n = m.match(/^([0-9]+|\\$[a-z]\\$|[a-z])\\/([0-9]+)(\\$[a-z]\\$|[a-z])?$/);\n            n[1] = n[1].replace(/\\$/g, \"\");\n            ret.push({ type_: 'frac', p1: n[1], p2: n[2] });\n            if (n[3]) {\n                n[3] = n[3].replace(/\\$/g, \"\");\n                ret.push({ type_: 'tex-math', p1: n[3] });\n            }\n            return ret;\n        },\n        '9,9': function (_buffer, m) { return _mhchemParser.go(m, '9,9'); }\n    },\n    stateMachines: {\n        'tex': {\n            transitions: _mhchemCreateTransitions({\n                'empty': {\n                    '0': { action_: 'copy' }\n                },\n                '\\\\ce{(...)}': {\n                    '0': { action_: [{ type_: 'write', option: \"{\" }, 'ce', { type_: 'write', option: \"}\" }] }\n                },\n                '\\\\pu{(...)}': {\n                    '0': { action_: [{ type_: 'write', option: \"{\" }, 'pu', { type_: 'write', option: \"}\" }] }\n                },\n                'else': {\n                    '0': { action_: 'copy' }\n                },\n            }),\n            actions: {}\n        },\n        'ce': {\n            transitions: _mhchemCreateTransitions({\n                'empty': {\n                    '*': { action_: 'output' }\n                },\n                'else': {\n                    '0|1|2': { action_: 'beginsWithBond=false', revisit: true, toContinue: true }\n                },\n                'oxidation$': {\n                    '0': { action_: 'oxidation-output' }\n                },\n                'CMT': {\n                    'r': { action_: 'rdt=', nextState: 'rt' },\n                    'rd': { action_: 'rqt=', nextState: 'rdt' }\n                },\n                'arrowUpDown': {\n                    '0|1|2|as': { action_: ['sb=false', 'output', 'operator'], nextState: '1' }\n                },\n                'uprightEntities': {\n                    '0|1|2': { action_: ['o=', 'output'], nextState: '1' }\n                },\n                'orbital': {\n                    '0|1|2|3': { action_: 'o=', nextState: 'o' }\n                },\n                '->': {\n                    '0|1|2|3': { action_: 'r=', nextState: 'r' },\n                    'a|as': { action_: ['output', 'r='], nextState: 'r' },\n                    '*': { action_: ['output', 'r='], nextState: 'r' }\n                },\n                '+': {\n                    'o': { action_: 'd= kv', nextState: 'd' },\n                    'd|D': { action_: 'd=', nextState: 'd' },\n                    'q': { action_: 'd=', nextState: 'qd' },\n                    'qd|qD': { action_: 'd=', nextState: 'qd' },\n                    'dq': { action_: ['output', 'd='], nextState: 'd' },\n                    '3': { action_: ['sb=false', 'output', 'operator'], nextState: '0' }\n                },\n                'amount': {\n                    '0|2': { action_: 'a=', nextState: 'a' }\n                },\n                'pm-operator': {\n                    '0|1|2|a|as': { action_: ['sb=false', 'output', { type_: 'operator', option: '\\\\pm' }], nextState: '0' }\n                },\n                'operator': {\n                    '0|1|2|a|as': { action_: ['sb=false', 'output', 'operator'], nextState: '0' }\n                },\n                '-$': {\n                    'o|q': { action_: ['charge or bond', 'output'], nextState: 'qd' },\n                    'd': { action_: 'd=', nextState: 'd' },\n                    'D': { action_: ['output', { type_: 'bond', option: \"-\" }], nextState: '3' },\n                    'q': { action_: 'd=', nextState: 'qd' },\n                    'qd': { action_: 'd=', nextState: 'qd' },\n                    'qD|dq': { action_: ['output', { type_: 'bond', option: \"-\" }], nextState: '3' }\n                },\n                '-9': {\n                    '3|o': { action_: ['output', { type_: 'insert', option: 'hyphen' }], nextState: '3' }\n                },\n                '- orbital overlap': {\n                    'o': { action_: ['output', { type_: 'insert', option: 'hyphen' }], nextState: '2' },\n                    'd': { action_: ['output', { type_: 'insert', option: 'hyphen' }], nextState: '2' }\n                },\n                '-': {\n                    '0|1|2': { action_: [{ type_: 'output', option: 1 }, 'beginsWithBond=true', { type_: 'bond', option: \"-\" }], nextState: '3' },\n                    '3': { action_: { type_: 'bond', option: \"-\" } },\n                    'a': { action_: ['output', { type_: 'insert', option: 'hyphen' }], nextState: '2' },\n                    'as': { action_: [{ type_: 'output', option: 2 }, { type_: 'bond', option: \"-\" }], nextState: '3' },\n                    'b': { action_: 'b=' },\n                    'o': { action_: { type_: '- after o/d', option: false }, nextState: '2' },\n                    'q': { action_: { type_: '- after o/d', option: false }, nextState: '2' },\n                    'd|qd|dq': { action_: { type_: '- after o/d', option: true }, nextState: '2' },\n                    'D|qD|p': { action_: ['output', { type_: 'bond', option: \"-\" }], nextState: '3' }\n                },\n                'amount2': {\n                    '1|3': { action_: 'a=', nextState: 'a' }\n                },\n                'letters': {\n                    '0|1|2|3|a|as|b|p|bp|o': { action_: 'o=', nextState: 'o' },\n                    'q|dq': { action_: ['output', 'o='], nextState: 'o' },\n                    'd|D|qd|qD': { action_: 'o after d', nextState: 'o' }\n                },\n                'digits': {\n                    'o': { action_: 'q=', nextState: 'q' },\n                    'd|D': { action_: 'q=', nextState: 'dq' },\n                    'q': { action_: ['output', 'o='], nextState: 'o' },\n                    'a': { action_: 'o=', nextState: 'o' }\n                },\n                'space A': {\n                    'b|p|bp': { action_: [] }\n                },\n                'space': {\n                    'a': { action_: [], nextState: 'as' },\n                    '0': { action_: 'sb=false' },\n                    '1|2': { action_: 'sb=true' },\n                    'r|rt|rd|rdt|rdq': { action_: 'output', nextState: '0' },\n                    '*': { action_: ['output', 'sb=true'], nextState: '1' }\n                },\n                '1st-level escape': {\n                    '1|2': { action_: ['output', { type_: 'insert+p1', option: '1st-level escape' }] },\n                    '*': { action_: ['output', { type_: 'insert+p1', option: '1st-level escape' }], nextState: '0' }\n                },\n                '[(...)]': {\n                    'r|rt': { action_: 'rd=', nextState: 'rd' },\n                    'rd|rdt': { action_: 'rq=', nextState: 'rdq' }\n                },\n                '...': {\n                    'o|d|D|dq|qd|qD': { action_: ['output', { type_: 'bond', option: \"...\" }], nextState: '3' },\n                    '*': { action_: [{ type_: 'output', option: 1 }, { type_: 'insert', option: 'ellipsis' }], nextState: '1' }\n                },\n                '. __* ': {\n                    '*': { action_: ['output', { type_: 'insert', option: 'addition compound' }], nextState: '1' }\n                },\n                'state of aggregation $': {\n                    '*': { action_: ['output', 'state of aggregation'], nextState: '1' }\n                },\n                '{[(': {\n                    'a|as|o': { action_: ['o=', 'output', 'parenthesisLevel++'], nextState: '2' },\n                    '0|1|2|3': { action_: ['o=', 'output', 'parenthesisLevel++'], nextState: '2' },\n                    '*': { action_: ['output', 'o=', 'output', 'parenthesisLevel++'], nextState: '2' }\n                },\n                ')]}': {\n                    '0|1|2|3|b|p|bp|o': { action_: ['o=', 'parenthesisLevel--'], nextState: 'o' },\n                    'a|as|d|D|q|qd|qD|dq': { action_: ['output', 'o=', 'parenthesisLevel--'], nextState: 'o' }\n                },\n                ', ': {\n                    '*': { action_: ['output', 'comma'], nextState: '0' }\n                },\n                '^_': {\n                    '*': { action_: [] }\n                },\n                '^{(...)}|^($...$)': {\n                    '0|1|2|as': { action_: 'b=', nextState: 'b' },\n                    'p': { action_: 'b=', nextState: 'bp' },\n                    '3|o': { action_: 'd= kv', nextState: 'D' },\n                    'q': { action_: 'd=', nextState: 'qD' },\n                    'd|D|qd|qD|dq': { action_: ['output', 'd='], nextState: 'D' }\n                },\n                '^a|^\\\\x{}{}|^\\\\x{}|^\\\\x|\\'': {\n                    '0|1|2|as': { action_: 'b=', nextState: 'b' },\n                    'p': { action_: 'b=', nextState: 'bp' },\n                    '3|o': { action_: 'd= kv', nextState: 'd' },\n                    'q': { action_: 'd=', nextState: 'qd' },\n                    'd|qd|D|qD': { action_: 'd=' },\n                    'dq': { action_: ['output', 'd='], nextState: 'd' }\n                },\n                '_{(state of aggregation)}$': {\n                    'd|D|q|qd|qD|dq': { action_: ['output', 'q='], nextState: 'q' }\n                },\n                '_{(...)}|_($...$)|_9|_\\\\x{}{}|_\\\\x{}|_\\\\x': {\n                    '0|1|2|as': { action_: 'p=', nextState: 'p' },\n                    'b': { action_: 'p=', nextState: 'bp' },\n                    '3|o': { action_: 'q=', nextState: 'q' },\n                    'd|D': { action_: 'q=', nextState: 'dq' },\n                    'q|qd|qD|dq': { action_: ['output', 'q='], nextState: 'q' }\n                },\n                '=<>': {\n                    '0|1|2|3|a|as|o|q|d|D|qd|qD|dq': { action_: [{ type_: 'output', option: 2 }, 'bond'], nextState: '3' }\n                },\n                '#': {\n                    '0|1|2|3|a|as|o': { action_: [{ type_: 'output', option: 2 }, { type_: 'bond', option: \"#\" }], nextState: '3' }\n                },\n                '{}^': {\n                    '*': { action_: [{ type_: 'output', option: 1 }, { type_: 'insert', option: 'tinySkip' }], nextState: '1' }\n                },\n                '{}': {\n                    '*': { action_: { type_: 'output', option: 1 }, nextState: '1' }\n                },\n                '{...}': {\n                    '0|1|2|3|a|as|b|p|bp': { action_: 'o=', nextState: 'o' },\n                    'o|d|D|q|qd|qD|dq': { action_: ['output', 'o='], nextState: 'o' }\n                },\n                '$...$': {\n                    'a': { action_: 'a=' },\n                    '0|1|2|3|as|b|p|bp|o': { action_: 'o=', nextState: 'o' },\n                    'as|o': { action_: 'o=' },\n                    'q|d|D|qd|qD|dq': { action_: ['output', 'o='], nextState: 'o' }\n                },\n                '\\\\bond{(...)}': {\n                    '*': { action_: [{ type_: 'output', option: 2 }, 'bond'], nextState: \"3\" }\n                },\n                '\\\\frac{(...)}': {\n                    '*': { action_: [{ type_: 'output', option: 1 }, 'frac-output'], nextState: '3' }\n                },\n                '\\\\overset{(...)}': {\n                    '*': { action_: [{ type_: 'output', option: 2 }, 'overset-output'], nextState: '3' }\n                },\n                '\\\\underset{(...)}': {\n                    '*': { action_: [{ type_: 'output', option: 2 }, 'underset-output'], nextState: '3' }\n                },\n                '\\\\underbrace{(...)}': {\n                    '*': { action_: [{ type_: 'output', option: 2 }, 'underbrace-output'], nextState: '3' }\n                },\n                '\\\\color{(...)}{(...)}': {\n                    '*': { action_: [{ type_: 'output', option: 2 }, 'color-output'], nextState: '3' }\n                },\n                '\\\\color{(...)}': {\n                    '*': { action_: [{ type_: 'output', option: 2 }, 'color0-output'] }\n                },\n                '\\\\ce{(...)}': {\n                    '*': { action_: [{ type_: 'output', option: 2 }, 'ce'], nextState: '3' }\n                },\n                '\\\\,': {\n                    '*': { action_: [{ type_: 'output', option: 1 }, 'copy'], nextState: '1' }\n                },\n                '\\\\pu{(...)}': {\n                    '*': { action_: ['output', { type_: 'write', option: \"{\" }, 'pu', { type_: 'write', option: \"}\" }], nextState: '3' }\n                },\n                '\\\\x{}{}|\\\\x{}|\\\\x': {\n                    '0|1|2|3|a|as|b|p|bp|o|c0': { action_: ['o=', 'output'], nextState: '3' },\n                    '*': { action_: ['output', 'o=', 'output'], nextState: '3' }\n                },\n                'others': {\n                    '*': { action_: [{ type_: 'output', option: 1 }, 'copy'], nextState: '3' }\n                },\n                'else2': {\n                    'a': { action_: 'a to o', nextState: 'o', revisit: true },\n                    'as': { action_: ['output', 'sb=true'], nextState: '1', revisit: true },\n                    'r|rt|rd|rdt|rdq': { action_: ['output'], nextState: '0', revisit: true },\n                    '*': { action_: ['output', 'copy'], nextState: '3' }\n                }\n            }),\n            actions: {\n                'o after d': function (buffer, m) {\n                    var ret;\n                    if ((buffer.d || \"\").match(/^[1-9][0-9]*$/)) {\n                        var tmp = buffer.d;\n                        buffer.d = undefined;\n                        ret = this['output'](buffer);\n                        ret.push({ type_: 'tinySkip' });\n                        buffer.b = tmp;\n                    }\n                    else {\n                        ret = this['output'](buffer);\n                    }\n                    _mhchemParser.actions['o='](buffer, m);\n                    return ret;\n                },\n                'd= kv': function (buffer, m) {\n                    buffer.d = m;\n                    buffer.dType = 'kv';\n                    return undefined;\n                },\n                'charge or bond': function (buffer, m) {\n                    if (buffer['beginsWithBond']) {\n                        var ret = [];\n                        _mhchemParser.concatArray(ret, this['output'](buffer));\n                        _mhchemParser.concatArray(ret, _mhchemParser.actions['bond'](buffer, m, \"-\"));\n                        return ret;\n                    }\n                    else {\n                        buffer.d = m;\n                        return undefined;\n                    }\n                },\n                '- after o/d': function (buffer, m, isAfterD) {\n                    var c1 = _mhchemParser.patterns.match_('orbital', buffer.o || \"\");\n                    var c2 = _mhchemParser.patterns.match_('one lowercase greek letter $', buffer.o || \"\");\n                    var c3 = _mhchemParser.patterns.match_('one lowercase latin letter $', buffer.o || \"\");\n                    var c4 = _mhchemParser.patterns.match_('$one lowercase latin letter$ $', buffer.o || \"\");\n                    var hyphenFollows = m === \"-\" && (c1 && c1.remainder === \"\" || c2 || c3 || c4);\n                    if (hyphenFollows && !buffer.a && !buffer.b && !buffer.p && !buffer.d && !buffer.q && !c1 && c3) {\n                        buffer.o = '$' + buffer.o + '$';\n                    }\n                    var ret = [];\n                    if (hyphenFollows) {\n                        _mhchemParser.concatArray(ret, this['output'](buffer));\n                        ret.push({ type_: 'hyphen' });\n                    }\n                    else {\n                        c1 = _mhchemParser.patterns.match_('digits', buffer.d || \"\");\n                        if (isAfterD && c1 && c1.remainder === '') {\n                            _mhchemParser.concatArray(ret, _mhchemParser.actions['d='](buffer, m));\n                            _mhchemParser.concatArray(ret, this['output'](buffer));\n                        }\n                        else {\n                            _mhchemParser.concatArray(ret, this['output'](buffer));\n                            _mhchemParser.concatArray(ret, _mhchemParser.actions['bond'](buffer, m, \"-\"));\n                        }\n                    }\n                    return ret;\n                },\n                'a to o': function (buffer) {\n                    buffer.o = buffer.a;\n                    buffer.a = undefined;\n                    return undefined;\n                },\n                'sb=true': function (buffer) { buffer.sb = true; return undefined; },\n                'sb=false': function (buffer) { buffer.sb = false; return undefined; },\n                'beginsWithBond=true': function (buffer) { buffer['beginsWithBond'] = true; return undefined; },\n                'beginsWithBond=false': function (buffer) { buffer['beginsWithBond'] = false; return undefined; },\n                'parenthesisLevel++': function (buffer) { buffer['parenthesisLevel']++; return undefined; },\n                'parenthesisLevel--': function (buffer) { buffer['parenthesisLevel']--; return undefined; },\n                'state of aggregation': function (_buffer, m) {\n                    return { type_: 'state of aggregation', p1: _mhchemParser.go(m, 'o') };\n                },\n                'comma': function (buffer, m) {\n                    var a = m.replace(/\\s*$/, '');\n                    var withSpace = (a !== m);\n                    if (withSpace && buffer['parenthesisLevel'] === 0) {\n                        return { type_: 'comma enumeration L', p1: a };\n                    }\n                    else {\n                        return { type_: 'comma enumeration M', p1: a };\n                    }\n                },\n                'output': function (buffer, _m, entityFollows) {\n                    var ret;\n                    if (!buffer.r) {\n                        ret = [];\n                        if (!buffer.a && !buffer.b && !buffer.p && !buffer.o && !buffer.q && !buffer.d && !entityFollows) {\n                        }\n                        else {\n                            if (buffer.sb) {\n                                ret.push({ type_: 'entitySkip' });\n                            }\n                            if (!buffer.o && !buffer.q && !buffer.d && !buffer.b && !buffer.p && entityFollows !== 2) {\n                                buffer.o = buffer.a;\n                                buffer.a = undefined;\n                            }\n                            else if (!buffer.o && !buffer.q && !buffer.d && (buffer.b || buffer.p)) {\n                                buffer.o = buffer.a;\n                                buffer.d = buffer.b;\n                                buffer.q = buffer.p;\n                                buffer.a = buffer.b = buffer.p = undefined;\n                            }\n                            else {\n                                if (buffer.o && buffer.dType === 'kv' && _mhchemParser.patterns.match_('d-oxidation$', buffer.d || \"\")) {\n                                    buffer.dType = 'oxidation';\n                                }\n                                else if (buffer.o && buffer.dType === 'kv' && !buffer.q) {\n                                    buffer.dType = undefined;\n                                }\n                            }\n                            ret.push({\n                                type_: 'chemfive',\n                                a: _mhchemParser.go(buffer.a, 'a'),\n                                b: _mhchemParser.go(buffer.b, 'bd'),\n                                p: _mhchemParser.go(buffer.p, 'pq'),\n                                o: _mhchemParser.go(buffer.o, 'o'),\n                                q: _mhchemParser.go(buffer.q, 'pq'),\n                                d: _mhchemParser.go(buffer.d, (buffer.dType === 'oxidation' ? 'oxidation' : 'bd')),\n                                dType: buffer.dType\n                            });\n                        }\n                    }\n                    else {\n                        var rd = void 0;\n                        if (buffer.rdt === 'M') {\n                            rd = _mhchemParser.go(buffer.rd, 'tex-math');\n                        }\n                        else if (buffer.rdt === 'T') {\n                            rd = [{ type_: 'text', p1: buffer.rd || \"\" }];\n                        }\n                        else {\n                            rd = _mhchemParser.go(buffer.rd, 'ce');\n                        }\n                        var rq = void 0;\n                        if (buffer.rqt === 'M') {\n                            rq = _mhchemParser.go(buffer.rq, 'tex-math');\n                        }\n                        else if (buffer.rqt === 'T') {\n                            rq = [{ type_: 'text', p1: buffer.rq || \"\" }];\n                        }\n                        else {\n                            rq = _mhchemParser.go(buffer.rq, 'ce');\n                        }\n                        ret = {\n                            type_: 'arrow',\n                            r: buffer.r,\n                            rd: rd,\n                            rq: rq\n                        };\n                    }\n                    for (var p in buffer) {\n                        if (p !== 'parenthesisLevel' && p !== 'beginsWithBond') {\n                            delete buffer[p];\n                        }\n                    }\n                    return ret;\n                },\n                'oxidation-output': function (_buffer, m) {\n                    var ret = [\"{\"];\n                    _mhchemParser.concatArray(ret, _mhchemParser.go(m, 'oxidation'));\n                    ret.push(\"}\");\n                    return ret;\n                },\n                'frac-output': function (_buffer, m) {\n                    return { type_: 'frac-ce', p1: _mhchemParser.go(m[0], 'ce'), p2: _mhchemParser.go(m[1], 'ce') };\n                },\n                'overset-output': function (_buffer, m) {\n                    return { type_: 'overset', p1: _mhchemParser.go(m[0], 'ce'), p2: _mhchemParser.go(m[1], 'ce') };\n                },\n                'underset-output': function (_buffer, m) {\n                    return { type_: 'underset', p1: _mhchemParser.go(m[0], 'ce'), p2: _mhchemParser.go(m[1], 'ce') };\n                },\n                'underbrace-output': function (_buffer, m) {\n                    return { type_: 'underbrace', p1: _mhchemParser.go(m[0], 'ce'), p2: _mhchemParser.go(m[1], 'ce') };\n                },\n                'color-output': function (_buffer, m) {\n                    return { type_: 'color', color1: m[0], color2: _mhchemParser.go(m[1], 'ce') };\n                },\n                'r=': function (buffer, m) { buffer.r = m; return undefined; },\n                'rdt=': function (buffer, m) { buffer.rdt = m; return undefined; },\n                'rd=': function (buffer, m) { buffer.rd = m; return undefined; },\n                'rqt=': function (buffer, m) { buffer.rqt = m; return undefined; },\n                'rq=': function (buffer, m) { buffer.rq = m; return undefined; },\n                'operator': function (_buffer, m, p1) { return { type_: 'operator', kind_: (p1 || m) }; }\n            }\n        },\n        'a': {\n            transitions: _mhchemCreateTransitions({\n                'empty': {\n                    '*': { action_: [] }\n                },\n                '1/2$': {\n                    '0': { action_: '1/2' }\n                },\n                'else': {\n                    '0': { action_: [], nextState: '1', revisit: true }\n                },\n                '${(...)}$__$(...)$': {\n                    '*': { action_: 'tex-math tight', nextState: '1' }\n                },\n                ',': {\n                    '*': { action_: { type_: 'insert', option: 'commaDecimal' } }\n                },\n                'else2': {\n                    '*': { action_: 'copy' }\n                }\n            }),\n            actions: {}\n        },\n        'o': {\n            transitions: _mhchemCreateTransitions({\n                'empty': {\n                    '*': { action_: [] }\n                },\n                '1/2$': {\n                    '0': { action_: '1/2' }\n                },\n                'else': {\n                    '0': { action_: [], nextState: '1', revisit: true }\n                },\n                'letters': {\n                    '*': { action_: 'rm' }\n                },\n                '\\\\ca': {\n                    '*': { action_: { type_: 'insert', option: 'circa' } }\n                },\n                '\\\\pu{(...)}': {\n                    '*': { action_: [{ type_: 'write', option: \"{\" }, 'pu', { type_: 'write', option: \"}\" }] }\n                },\n                '\\\\x{}{}|\\\\x{}|\\\\x': {\n                    '*': { action_: 'copy' }\n                },\n                '${(...)}$__$(...)$': {\n                    '*': { action_: 'tex-math' }\n                },\n                '{(...)}': {\n                    '*': { action_: [{ type_: 'write', option: \"{\" }, 'text', { type_: 'write', option: \"}\" }] }\n                },\n                'else2': {\n                    '*': { action_: 'copy' }\n                }\n            }),\n            actions: {}\n        },\n        'text': {\n            transitions: _mhchemCreateTransitions({\n                'empty': {\n                    '*': { action_: 'output' }\n                },\n                '{...}': {\n                    '*': { action_: 'text=' }\n                },\n                '${(...)}$__$(...)$': {\n                    '*': { action_: 'tex-math' }\n                },\n                '\\\\greek': {\n                    '*': { action_: ['output', 'rm'] }\n                },\n                '\\\\pu{(...)}': {\n                    '*': { action_: ['output', { type_: 'write', option: \"{\" }, 'pu', { type_: 'write', option: \"}\" }] }\n                },\n                '\\\\,|\\\\x{}{}|\\\\x{}|\\\\x': {\n                    '*': { action_: ['output', 'copy'] }\n                },\n                'else': {\n                    '*': { action_: 'text=' }\n                }\n            }),\n            actions: {\n                'output': function (buffer) {\n                    if (buffer.text_) {\n                        var ret = { type_: 'text', p1: buffer.text_ };\n                        for (var p in buffer) {\n                            delete buffer[p];\n                        }\n                        return ret;\n                    }\n                    return undefined;\n                }\n            }\n        },\n        'pq': {\n            transitions: _mhchemCreateTransitions({\n                'empty': {\n                    '*': { action_: [] }\n                },\n                'state of aggregation $': {\n                    '*': { action_: 'state of aggregation' }\n                },\n                'i$': {\n                    '0': { action_: [], nextState: '!f', revisit: true }\n                },\n                '(KV letters),': {\n                    '0': { action_: 'rm', nextState: '0' }\n                },\n                'formula$': {\n                    '0': { action_: [], nextState: 'f', revisit: true }\n                },\n                '1/2$': {\n                    '0': { action_: '1/2' }\n                },\n                'else': {\n                    '0': { action_: [], nextState: '!f', revisit: true }\n                },\n                '${(...)}$__$(...)$': {\n                    '*': { action_: 'tex-math' }\n                },\n                '{(...)}': {\n                    '*': { action_: 'text' }\n                },\n                'a-z': {\n                    'f': { action_: 'tex-math' }\n                },\n                'letters': {\n                    '*': { action_: 'rm' }\n                },\n                '-9.,9': {\n                    '*': { action_: '9,9' }\n                },\n                ',': {\n                    '*': { action_: { type_: 'insert+p1', option: 'comma enumeration S' } }\n                },\n                '\\\\color{(...)}{(...)}': {\n                    '*': { action_: 'color-output' }\n                },\n                '\\\\color{(...)}': {\n                    '*': { action_: 'color0-output' }\n                },\n                '\\\\ce{(...)}': {\n                    '*': { action_: 'ce' }\n                },\n                '\\\\pu{(...)}': {\n                    '*': { action_: [{ type_: 'write', option: \"{\" }, 'pu', { type_: 'write', option: \"}\" }] }\n                },\n                '\\\\,|\\\\x{}{}|\\\\x{}|\\\\x': {\n                    '*': { action_: 'copy' }\n                },\n                'else2': {\n                    '*': { action_: 'copy' }\n                }\n            }),\n            actions: {\n                'state of aggregation': function (_buffer, m) {\n                    return { type_: 'state of aggregation subscript', p1: _mhchemParser.go(m, 'o') };\n                },\n                'color-output': function (_buffer, m) {\n                    return { type_: 'color', color1: m[0], color2: _mhchemParser.go(m[1], 'pq') };\n                }\n            }\n        },\n        'bd': {\n            transitions: _mhchemCreateTransitions({\n                'empty': {\n                    '*': { action_: [] }\n                },\n                'x$': {\n                    '0': { action_: [], nextState: '!f', revisit: true }\n                },\n                'formula$': {\n                    '0': { action_: [], nextState: 'f', revisit: true }\n                },\n                'else': {\n                    '0': { action_: [], nextState: '!f', revisit: true }\n                },\n                '-9.,9 no missing 0': {\n                    '*': { action_: '9,9' }\n                },\n                '.': {\n                    '*': { action_: { type_: 'insert', option: 'electron dot' } }\n                },\n                'a-z': {\n                    'f': { action_: 'tex-math' }\n                },\n                'x': {\n                    '*': { action_: { type_: 'insert', option: 'KV x' } }\n                },\n                'letters': {\n                    '*': { action_: 'rm' }\n                },\n                '\\'': {\n                    '*': { action_: { type_: 'insert', option: 'prime' } }\n                },\n                '${(...)}$__$(...)$': {\n                    '*': { action_: 'tex-math' }\n                },\n                '{(...)}': {\n                    '*': { action_: 'text' }\n                },\n                '\\\\color{(...)}{(...)}': {\n                    '*': { action_: 'color-output' }\n                },\n                '\\\\color{(...)}': {\n                    '*': { action_: 'color0-output' }\n                },\n                '\\\\ce{(...)}': {\n                    '*': { action_: 'ce' }\n                },\n                '\\\\pu{(...)}': {\n                    '*': { action_: [{ type_: 'write', option: \"{\" }, 'pu', { type_: 'write', option: \"}\" }] }\n                },\n                '\\\\,|\\\\x{}{}|\\\\x{}|\\\\x': {\n                    '*': { action_: 'copy' }\n                },\n                'else2': {\n                    '*': { action_: 'copy' }\n                }\n            }),\n            actions: {\n                'color-output': function (_buffer, m) {\n                    return { type_: 'color', color1: m[0], color2: _mhchemParser.go(m[1], 'bd') };\n                }\n            }\n        },\n        'oxidation': {\n            transitions: _mhchemCreateTransitions({\n                'empty': {\n                    '*': { action_: 'roman-numeral' }\n                },\n                'pm-operator': {\n                    '*': { action_: { type_: 'o=+p1', option: \"\\\\pm\" } }\n                },\n                'else': {\n                    '*': { action_: 'o=' }\n                }\n            }),\n            actions: {\n                'roman-numeral': function (buffer) { return { type_: 'roman numeral', p1: buffer.o || \"\" }; }\n            }\n        },\n        'tex-math': {\n            transitions: _mhchemCreateTransitions({\n                'empty': {\n                    '*': { action_: 'output' }\n                },\n                '\\\\ce{(...)}': {\n                    '*': { action_: ['output', 'ce'] }\n                },\n                '\\\\pu{(...)}': {\n                    '*': { action_: ['output', { type_: 'write', option: \"{\" }, 'pu', { type_: 'write', option: \"}\" }] }\n                },\n                '{...}|\\\\,|\\\\x{}{}|\\\\x{}|\\\\x': {\n                    '*': { action_: 'o=' }\n                },\n                'else': {\n                    '*': { action_: 'o=' }\n                }\n            }),\n            actions: {\n                'output': function (buffer) {\n                    if (buffer.o) {\n                        var ret = { type_: 'tex-math', p1: buffer.o };\n                        for (var p in buffer) {\n                            delete buffer[p];\n                        }\n                        return ret;\n                    }\n                    return undefined;\n                }\n            }\n        },\n        'tex-math tight': {\n            transitions: _mhchemCreateTransitions({\n                'empty': {\n                    '*': { action_: 'output' }\n                },\n                '\\\\ce{(...)}': {\n                    '*': { action_: ['output', 'ce'] }\n                },\n                '\\\\pu{(...)}': {\n                    '*': { action_: ['output', { type_: 'write', option: \"{\" }, 'pu', { type_: 'write', option: \"}\" }] }\n                },\n                '{...}|\\\\,|\\\\x{}{}|\\\\x{}|\\\\x': {\n                    '*': { action_: 'o=' }\n                },\n                '-|+': {\n                    '*': { action_: 'tight operator' }\n                },\n                'else': {\n                    '*': { action_: 'o=' }\n                }\n            }),\n            actions: {\n                'tight operator': function (buffer, m) { buffer.o = (buffer.o || \"\") + \"{\" + m + \"}\"; return undefined; },\n                'output': function (buffer) {\n                    if (buffer.o) {\n                        var ret = { type_: 'tex-math', p1: buffer.o };\n                        for (var p in buffer) {\n                            delete buffer[p];\n                        }\n                        return ret;\n                    }\n                    return undefined;\n                }\n            }\n        },\n        '9,9': {\n            transitions: _mhchemCreateTransitions({\n                'empty': {\n                    '*': { action_: [] }\n                },\n                ',': {\n                    '*': { action_: 'comma' }\n                },\n                'else': {\n                    '*': { action_: 'copy' }\n                }\n            }),\n            actions: {\n                'comma': function () { return { type_: 'commaDecimal' }; }\n            }\n        },\n        'pu': {\n            transitions: _mhchemCreateTransitions({\n                'empty': {\n                    '*': { action_: 'output' }\n                },\n                'space$': {\n                    '*': { action_: ['output', 'space'] }\n                },\n                '{[(|)]}': {\n                    '0|a': { action_: 'copy' }\n                },\n                '(-)(9)^(-9)': {\n                    '0': { action_: 'number^', nextState: 'a' }\n                },\n                '(-)(9.,9)(e)(99)': {\n                    '0': { action_: 'enumber', nextState: 'a' }\n                },\n                'space': {\n                    '0|a': { action_: [] }\n                },\n                'pm-operator': {\n                    '0|a': { action_: { type_: 'operator', option: '\\\\pm' }, nextState: '0' }\n                },\n                'operator': {\n                    '0|a': { action_: 'copy', nextState: '0' }\n                },\n                '//': {\n                    'd': { action_: 'o=', nextState: '/' }\n                },\n                '/': {\n                    'd': { action_: 'o=', nextState: '/' }\n                },\n                '{...}|else': {\n                    '0|d': { action_: 'd=', nextState: 'd' },\n                    'a': { action_: ['space', 'd='], nextState: 'd' },\n                    '/|q': { action_: 'q=', nextState: 'q' }\n                }\n            }),\n            actions: {\n                'enumber': function (_buffer, m) {\n                    var ret = [];\n                    if (m[0] === \"+-\" || m[0] === \"+/-\") {\n                        ret.push(\"\\\\pm \");\n                    }\n                    else if (m[0]) {\n                        ret.push(m[0]);\n                    }\n                    if (m[1]) {\n                        _mhchemParser.concatArray(ret, _mhchemParser.go(m[1], 'pu-9,9'));\n                        if (m[2]) {\n                            if (m[2].match(/[,.]/)) {\n                                _mhchemParser.concatArray(ret, _mhchemParser.go(m[2], 'pu-9,9'));\n                            }\n                            else {\n                                ret.push(m[2]);\n                            }\n                        }\n                        if (m[3] || m[4]) {\n                            if (m[3] === \"e\" || m[4] === \"*\") {\n                                ret.push({ type_: 'cdot' });\n                            }\n                            else {\n                                ret.push({ type_: 'times' });\n                            }\n                        }\n                    }\n                    if (m[5]) {\n                        ret.push(\"10^{\" + m[5] + \"}\");\n                    }\n                    return ret;\n                },\n                'number^': function (_buffer, m) {\n                    var ret = [];\n                    if (m[0] === \"+-\" || m[0] === \"+/-\") {\n                        ret.push(\"\\\\pm \");\n                    }\n                    else if (m[0]) {\n                        ret.push(m[0]);\n                    }\n                    _mhchemParser.concatArray(ret, _mhchemParser.go(m[1], 'pu-9,9'));\n                    ret.push(\"^{\" + m[2] + \"}\");\n                    return ret;\n                },\n                'operator': function (_buffer, m, p1) { return { type_: 'operator', kind_: (p1 || m) }; },\n                'space': function () { return { type_: 'pu-space-1' }; },\n                'output': function (buffer) {\n                    var ret;\n                    var md = _mhchemParser.patterns.match_('{(...)}', buffer.d || \"\");\n                    if (md && md.remainder === '') {\n                        buffer.d = md.match_;\n                    }\n                    var mq = _mhchemParser.patterns.match_('{(...)}', buffer.q || \"\");\n                    if (mq && mq.remainder === '') {\n                        buffer.q = mq.match_;\n                    }\n                    if (buffer.d) {\n                        buffer.d = buffer.d.replace(/\\u00B0C|\\^oC|\\^{o}C/g, \"{}^{\\\\circ}C\");\n                        buffer.d = buffer.d.replace(/\\u00B0F|\\^oF|\\^{o}F/g, \"{}^{\\\\circ}F\");\n                    }\n                    if (buffer.q) {\n                        buffer.q = buffer.q.replace(/\\u00B0C|\\^oC|\\^{o}C/g, \"{}^{\\\\circ}C\");\n                        buffer.q = buffer.q.replace(/\\u00B0F|\\^oF|\\^{o}F/g, \"{}^{\\\\circ}F\");\n                        var b5 = {\n                            d: _mhchemParser.go(buffer.d, 'pu'),\n                            q: _mhchemParser.go(buffer.q, 'pu')\n                        };\n                        if (buffer.o === '//') {\n                            ret = { type_: 'pu-frac', p1: b5.d, p2: b5.q };\n                        }\n                        else {\n                            ret = b5.d;\n                            if (b5.d.length > 1 || b5.q.length > 1) {\n                                ret.push({ type_: ' / ' });\n                            }\n                            else {\n                                ret.push({ type_: '/' });\n                            }\n                            _mhchemParser.concatArray(ret, b5.q);\n                        }\n                    }\n                    else {\n                        ret = _mhchemParser.go(buffer.d, 'pu-2');\n                    }\n                    for (var p in buffer) {\n                        delete buffer[p];\n                    }\n                    return ret;\n                }\n            }\n        },\n        'pu-2': {\n            transitions: _mhchemCreateTransitions({\n                'empty': {\n                    '*': { action_: 'output' }\n                },\n                '*': {\n                    '*': { action_: ['output', 'cdot'], nextState: '0' }\n                },\n                '\\\\x': {\n                    '*': { action_: 'rm=' }\n                },\n                'space': {\n                    '*': { action_: ['output', 'space'], nextState: '0' }\n                },\n                '^{(...)}|^(-1)': {\n                    '1': { action_: '^(-1)' }\n                },\n                '-9.,9': {\n                    '0': { action_: 'rm=', nextState: '0' },\n                    '1': { action_: '^(-1)', nextState: '0' }\n                },\n                '{...}|else': {\n                    '*': { action_: 'rm=', nextState: '1' }\n                }\n            }),\n            actions: {\n                'cdot': function () { return { type_: 'tight cdot' }; },\n                '^(-1)': function (buffer, m) { buffer.rm += \"^{\" + m + \"}\"; return undefined; },\n                'space': function () { return { type_: 'pu-space-2' }; },\n                'output': function (buffer) {\n                    var ret = [];\n                    if (buffer.rm) {\n                        var mrm = _mhchemParser.patterns.match_('{(...)}', buffer.rm || \"\");\n                        if (mrm && mrm.remainder === '') {\n                            ret = _mhchemParser.go(mrm.match_, 'pu');\n                        }\n                        else {\n                            ret = { type_: 'rm', p1: buffer.rm };\n                        }\n                    }\n                    for (var p in buffer) {\n                        delete buffer[p];\n                    }\n                    return ret;\n                }\n            }\n        },\n        'pu-9,9': {\n            transitions: _mhchemCreateTransitions({\n                'empty': {\n                    '0': { action_: 'output-0' },\n                    'o': { action_: 'output-o' }\n                },\n                ',': {\n                    '0': { action_: ['output-0', 'comma'], nextState: 'o' }\n                },\n                '.': {\n                    '0': { action_: ['output-0', 'copy'], nextState: 'o' }\n                },\n                'else': {\n                    '*': { action_: 'text=' }\n                }\n            }),\n            actions: {\n                'comma': function () { return { type_: 'commaDecimal' }; },\n                'output-0': function (buffer) {\n                    var ret = [];\n                    buffer.text_ = buffer.text_ || \"\";\n                    if (buffer.text_.length > 4) {\n                        var a = buffer.text_.length % 3;\n                        if (a === 0) {\n                            a = 3;\n                        }\n                        for (var i = buffer.text_.length - 3; i > 0; i -= 3) {\n                            ret.push(buffer.text_.substr(i, 3));\n                            ret.push({ type_: '1000 separator' });\n                        }\n                        ret.push(buffer.text_.substr(0, a));\n                        ret.reverse();\n                    }\n                    else {\n                        ret.push(buffer.text_);\n                    }\n                    for (var p in buffer) {\n                        delete buffer[p];\n                    }\n                    return ret;\n                },\n                'output-o': function (buffer) {\n                    var ret = [];\n                    buffer.text_ = buffer.text_ || \"\";\n                    if (buffer.text_.length > 4) {\n                        var a = buffer.text_.length - 3;\n                        var i = void 0;\n                        for (i = 0; i < a; i += 3) {\n                            ret.push(buffer.text_.substr(i, 3));\n                            ret.push({ type_: '1000 separator' });\n                        }\n                        ret.push(buffer.text_.substr(i));\n                    }\n                    else {\n                        ret.push(buffer.text_);\n                    }\n                    for (var p in buffer) {\n                        delete buffer[p];\n                    }\n                    return ret;\n                }\n            }\n        }\n    }\n};\nvar _mhchemTexify = {\n    go: function (input, addOuterBraces) {\n        if (!input) {\n            return \"\";\n        }\n        var res = \"\";\n        var cee = false;\n        for (var i = 0; i < input.length; i++) {\n            var inputi = input[i];\n            if (typeof inputi === \"string\") {\n                res += inputi;\n            }\n            else {\n                res += _mhchemTexify._go2(inputi);\n                if (inputi.type_ === '1st-level escape') {\n                    cee = true;\n                }\n            }\n        }\n        if (addOuterBraces && !cee && res) {\n            res = \"{\" + res + \"}\";\n        }\n        return res;\n    },\n    _goInner: function (input) {\n        return _mhchemTexify.go(input, false);\n    },\n    _go2: function (buf) {\n        var res;\n        switch (buf.type_) {\n            case 'chemfive':\n                res = \"\";\n                var b5 = {\n                    a: _mhchemTexify._goInner(buf.a),\n                    b: _mhchemTexify._goInner(buf.b),\n                    p: _mhchemTexify._goInner(buf.p),\n                    o: _mhchemTexify._goInner(buf.o),\n                    q: _mhchemTexify._goInner(buf.q),\n                    d: _mhchemTexify._goInner(buf.d)\n                };\n                if (b5.a) {\n                    if (b5.a.match(/^[+\\-]/)) {\n                        b5.a = \"{\" + b5.a + \"}\";\n                    }\n                    res += b5.a + \"\\\\,\";\n                }\n                if (b5.b || b5.p) {\n                    res += \"{\\\\vphantom{A}}\";\n                    res += \"^{\\\\hphantom{\" + (b5.b || \"\") + \"}}_{\\\\hphantom{\" + (b5.p || \"\") + \"}}\";\n                    res += \"\\\\mkern-1.5mu\";\n                    res += \"{\\\\vphantom{A}}\";\n                    res += \"^{\\\\smash[t]{\\\\vphantom{2}}\\\\llap{\" + (b5.b || \"\") + \"}}\";\n                    res += \"_{\\\\vphantom{2}\\\\llap{\\\\smash[t]{\" + (b5.p || \"\") + \"}}}\";\n                }\n                if (b5.o) {\n                    if (b5.o.match(/^[+\\-]/)) {\n                        b5.o = \"{\" + b5.o + \"}\";\n                    }\n                    res += b5.o;\n                }\n                if (buf.dType === 'kv') {\n                    if (b5.d || b5.q) {\n                        res += \"{\\\\vphantom{A}}\";\n                    }\n                    if (b5.d) {\n                        res += \"^{\" + b5.d + \"}\";\n                    }\n                    if (b5.q) {\n                        res += \"_{\\\\smash[t]{\" + b5.q + \"}}\";\n                    }\n                }\n                else if (buf.dType === 'oxidation') {\n                    if (b5.d) {\n                        res += \"{\\\\vphantom{A}}\";\n                        res += \"^{\" + b5.d + \"}\";\n                    }\n                    if (b5.q) {\n                        res += \"{\\\\vphantom{A}}\";\n                        res += \"_{\\\\smash[t]{\" + b5.q + \"}}\";\n                    }\n                }\n                else {\n                    if (b5.q) {\n                        res += \"{\\\\vphantom{A}}\";\n                        res += \"_{\\\\smash[t]{\" + b5.q + \"}}\";\n                    }\n                    if (b5.d) {\n                        res += \"{\\\\vphantom{A}}\";\n                        res += \"^{\" + b5.d + \"}\";\n                    }\n                }\n                break;\n            case 'rm':\n                res = \"\\\\mathrm{\" + buf.p1 + \"}\";\n                break;\n            case 'text':\n                if (buf.p1.match(/[\\^_]/)) {\n                    buf.p1 = buf.p1.replace(\" \", \"~\").replace(\"-\", \"\\\\text{-}\");\n                    res = \"\\\\mathrm{\" + buf.p1 + \"}\";\n                }\n                else {\n                    res = \"\\\\text{\" + buf.p1 + \"}\";\n                }\n                break;\n            case 'roman numeral':\n                res = \"\\\\mathrm{\" + buf.p1 + \"}\";\n                break;\n            case 'state of aggregation':\n                res = \"\\\\mskip2mu \" + _mhchemTexify._goInner(buf.p1);\n                break;\n            case 'state of aggregation subscript':\n                res = \"\\\\mskip1mu \" + _mhchemTexify._goInner(buf.p1);\n                break;\n            case 'bond':\n                res = _mhchemTexify._getBond(buf.kind_);\n                if (!res) {\n                    throw [\"MhchemErrorBond\", \"mhchem Error. Unknown bond type (\" + buf.kind_ + \")\"];\n                }\n                break;\n            case 'frac':\n                var c = \"\\\\frac{\" + buf.p1 + \"}{\" + buf.p2 + \"}\";\n                res = \"\\\\mathchoice{\\\\textstyle\" + c + \"}{\" + c + \"}{\" + c + \"}{\" + c + \"}\";\n                break;\n            case 'pu-frac':\n                var d = \"\\\\frac{\" + _mhchemTexify._goInner(buf.p1) + \"}{\" + _mhchemTexify._goInner(buf.p2) + \"}\";\n                res = \"\\\\mathchoice{\\\\textstyle\" + d + \"}{\" + d + \"}{\" + d + \"}{\" + d + \"}\";\n                break;\n            case 'tex-math':\n                res = buf.p1 + \" \";\n                break;\n            case 'frac-ce':\n                res = \"\\\\frac{\" + _mhchemTexify._goInner(buf.p1) + \"}{\" + _mhchemTexify._goInner(buf.p2) + \"}\";\n                break;\n            case 'overset':\n                res = \"\\\\overset{\" + _mhchemTexify._goInner(buf.p1) + \"}{\" + _mhchemTexify._goInner(buf.p2) + \"}\";\n                break;\n            case 'underset':\n                res = \"\\\\underset{\" + _mhchemTexify._goInner(buf.p1) + \"}{\" + _mhchemTexify._goInner(buf.p2) + \"}\";\n                break;\n            case 'underbrace':\n                res = \"\\\\underbrace{\" + _mhchemTexify._goInner(buf.p1) + \"}_{\" + _mhchemTexify._goInner(buf.p2) + \"}\";\n                break;\n            case 'color':\n                res = \"{\\\\color{\" + buf.color1 + \"}{\" + _mhchemTexify._goInner(buf.color2) + \"}}\";\n                break;\n            case 'color0':\n                res = \"\\\\color{\" + buf.color + \"}\";\n                break;\n            case 'arrow':\n                var b6 = {\n                    rd: _mhchemTexify._goInner(buf.rd),\n                    rq: _mhchemTexify._goInner(buf.rq)\n                };\n                var arrow = _mhchemTexify._getArrow(buf.r);\n                if (b6.rd || b6.rq) {\n                    if (buf.r === \"<=>\" || buf.r === \"<=>>\" || buf.r === \"<<=>\" || buf.r === \"<-->\") {\n                        arrow = \"\\\\long\" + arrow;\n                        if (b6.rd) {\n                            arrow = \"\\\\overset{\" + b6.rd + \"}{\" + arrow + \"}\";\n                        }\n                        if (b6.rq) {\n                            if (buf.r === \"<-->\") {\n                                arrow = \"\\\\underset{\\\\lower2mu{\" + b6.rq + \"}}{\" + arrow + \"}\";\n                            }\n                            else {\n                                arrow = \"\\\\underset{\\\\lower6mu{\" + b6.rq + \"}}{\" + arrow + \"}\";\n                            }\n                        }\n                        arrow = \" {}\\\\mathrel{\" + arrow + \"}{} \";\n                    }\n                    else {\n                        if (b6.rq) {\n                            arrow += \"[{\" + b6.rq + \"}]\";\n                        }\n                        arrow += \"{\" + b6.rd + \"}\";\n                        arrow = \" {}\\\\mathrel{\\\\x\" + arrow + \"}{} \";\n                    }\n                }\n                else {\n                    arrow = \" {}\\\\mathrel{\\\\long\" + arrow + \"}{} \";\n                }\n                res = arrow;\n                break;\n            case 'operator':\n                res = _mhchemTexify._getOperator(buf.kind_);\n                break;\n            case '1st-level escape':\n                res = buf.p1 + \" \";\n                break;\n            case 'space':\n                res = \" \";\n                break;\n            case 'tinySkip':\n                res = '\\\\mkern2mu';\n                break;\n            case 'entitySkip':\n                res = \"~\";\n                break;\n            case 'pu-space-1':\n                res = \"~\";\n                break;\n            case 'pu-space-2':\n                res = \"\\\\mkern3mu \";\n                break;\n            case '1000 separator':\n                res = \"\\\\mkern2mu \";\n                break;\n            case 'commaDecimal':\n                res = \"{,}\";\n                break;\n            case 'comma enumeration L':\n                res = \"{\" + buf.p1 + \"}\\\\mkern6mu \";\n                break;\n            case 'comma enumeration M':\n                res = \"{\" + buf.p1 + \"}\\\\mkern3mu \";\n                break;\n            case 'comma enumeration S':\n                res = \"{\" + buf.p1 + \"}\\\\mkern1mu \";\n                break;\n            case 'hyphen':\n                res = \"\\\\text{-}\";\n                break;\n            case 'addition compound':\n                res = \"\\\\,{\\\\cdot}\\\\,\";\n                break;\n            case 'electron dot':\n                res = \"\\\\mkern1mu \\\\bullet\\\\mkern1mu \";\n                break;\n            case 'KV x':\n                res = \"{\\\\times}\";\n                break;\n            case 'prime':\n                res = \"\\\\prime \";\n                break;\n            case 'cdot':\n                res = \"\\\\cdot \";\n                break;\n            case 'tight cdot':\n                res = \"\\\\mkern1mu{\\\\cdot}\\\\mkern1mu \";\n                break;\n            case 'times':\n                res = \"\\\\times \";\n                break;\n            case 'circa':\n                res = \"{\\\\sim}\";\n                break;\n            case '^':\n                res = \"uparrow\";\n                break;\n            case 'v':\n                res = \"downarrow\";\n                break;\n            case 'ellipsis':\n                res = \"\\\\ldots \";\n                break;\n            case '/':\n                res = \"/\";\n                break;\n            case ' / ':\n                res = \"\\\\,/\\\\,\";\n                break;\n            default:\n                assertNever(buf);\n                throw [\"MhchemBugT\", \"mhchem bug T. Please report.\"];\n        }\n        return res;\n    },\n    _getArrow: function (a) {\n        switch (a) {\n            case \"->\": return \"rightarrow\";\n            case \"\\u2192\": return \"rightarrow\";\n            case \"\\u27F6\": return \"rightarrow\";\n            case \"<-\": return \"leftarrow\";\n            case \"<->\": return \"leftrightarrow\";\n            case \"<-->\": return \"leftrightarrows\";\n            case \"<=>\": return \"rightleftharpoons\";\n            case \"\\u21CC\": return \"rightleftharpoons\";\n            case \"<=>>\": return \"Rightleftharpoons\";\n            case \"<<=>\": return \"Leftrightharpoons\";\n            default:\n                assertNever(a);\n                throw [\"MhchemBugT\", \"mhchem bug T. Please report.\"];\n        }\n    },\n    _getBond: function (a) {\n        switch (a) {\n            case \"-\": return \"{-}\";\n            case \"1\": return \"{-}\";\n            case \"=\": return \"{=}\";\n            case \"2\": return \"{=}\";\n            case \"#\": return \"{\\\\equiv}\";\n            case \"3\": return \"{\\\\equiv}\";\n            case \"~\": return \"{\\\\tripledash}\";\n            case \"~-\": return \"{\\\\rlap{\\\\lower.1em{-}}\\\\raise.1em{\\\\tripledash}}\";\n            case \"~=\": return \"{\\\\rlap{\\\\lower.2em{-}}\\\\rlap{\\\\raise.2em{\\\\tripledash}}-}\";\n            case \"~--\": return \"{\\\\rlap{\\\\lower.2em{-}}\\\\rlap{\\\\raise.2em{\\\\tripledash}}-}\";\n            case \"-~-\": return \"{\\\\rlap{\\\\lower.2em{-}}\\\\rlap{\\\\raise.2em{-}}\\\\tripledash}\";\n            case \"...\": return \"{{\\\\cdot}{\\\\cdot}{\\\\cdot}}\";\n            case \"....\": return \"{{\\\\cdot}{\\\\cdot}{\\\\cdot}{\\\\cdot}}\";\n            case \"->\": return \"{\\\\rightarrow}\";\n            case \"<-\": return \"{\\\\leftarrow}\";\n            case \"<\": return \"{<}\";\n            case \">\": return \"{>}\";\n            default:\n                assertNever(a);\n                throw [\"MhchemBugT\", \"mhchem bug T. Please report.\"];\n        }\n    },\n    _getOperator: function (a) {\n        switch (a) {\n            case \"+\": return \" {}+{} \";\n            case \"-\": return \" {}-{} \";\n            case \"=\": return \" {}={} \";\n            case \"<\": return \" {}<{} \";\n            case \">\": return \" {}>{} \";\n            case \"<<\": return \" {}\\\\ll{} \";\n            case \">>\": return \" {}\\\\gg{} \";\n            case \"\\\\pm\": return \" {}\\\\pm{} \";\n            case \"\\\\approx\": return \" {}\\\\approx{} \";\n            case \"$\\\\approx$\": return \" {}\\\\approx{} \";\n            case \"v\": return \" \\\\downarrow{} \";\n            case \"(v)\": return \" \\\\downarrow{} \";\n            case \"^\": return \" \\\\uparrow{} \";\n            case \"(^)\": return \" \\\\uparrow{} \";\n            default:\n                assertNever(a);\n                throw [\"MhchemBugT\", \"mhchem bug T. Please report.\"];\n        }\n    }\n};\nfunction assertNever(a) { }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mhchemparser/dist/mhchemParser.js\n");

/***/ })

};
;